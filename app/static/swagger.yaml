swagger: "2.0"
info:
  version: "1.0.0"
  title: "Mechanic Shop API"
  description: "API for managing customers, mechanics, parts, and service tickets."

host: "mechanics-api.onrender.com"
basePath: "/"
schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

# ================================
# SECURITY
# ================================
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: |
      JWT Authorization header using the Bearer scheme.
      Example: "Bearer {token}"

# ================================
# TAGS
# ================================
tags:
  - name: Customers
    description: "Customer management"
  - name: Mechanics
    description: "Mechanic registration, login, and management"
  - name: Inventory
    description: "Parts/Inventory management"
  - name: Service Tickets
    description: "Service ticket creation and tracking"
  - name: Negative Tests
    description: "Endpoints for intentional failure scenarios"

# ================================
# PATHS
# ================================
paths:
  # ---- CUSTOMERS ----
  /customers:
    post:
      tags: [Customers]
      summary: Create a new customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "201": { description: Customer created }
        "400": { description: Bad Request }
        "409": { description: Conflict (email exists) }

    get:
      tags: [Customers]
      summary: Get all customers
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: List of customers }

  /customers/search:
    get:
      tags: [Customers]
      summary: Search customer by email
      parameters:
        - name: email
          in: query
          required: true
          type: string
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: Customer found }
        "404": { description: Customer not found }

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema: { $ref: "#/definitions/Customer" }
      responses:
        "200": { description: Customer updated }
        "404": { description: Customer not found }

    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Customer deleted }
        "404": { description: Customer not found }

  # ---- MECHANICS ----
  /mechanics/ping:
    get:
      tags: [Mechanics]
      summary: Health check endpoint
      responses:
        "200": { description: Pong }

  /login:
    post:
      tags: [Mechanics]
      summary: Login mechanic
      parameters:
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/Login" }
      responses:
        "200": { description: Successful login (returns JWT token) }
        "400": { description: Invalid credentials }

  /mechanics:
    get:
      tags: [Mechanics]
      summary: Get all mechanics
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: List of mechanics }
        "401": { description: Unauthorized }

    post:
      tags: [Mechanics]
      summary: Create mechanic
      parameters:
        - in: body
          name: body
          schema: { $ref: "#/definitions/Mechanic" }
      responses:
        "201": { description: Mechanic created }
        "400": { description: Invalid input }
        "409": { description: Email exists }

  /mechanics/{id}:
    put:
      tags: [Mechanics]
      summary: Update mechanic
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema: { $ref: "#/definitions/Mechanic" }
      responses:
        "200": { description: Mechanic updated }
        "404": { description: Mechanic not found }

    delete:
      tags: [Mechanics]
      summary: Delete mechanic
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Mechanic deleted }
        "404": { description: Mechanic not found }

  /mechanics/{id}/tickets:
    get:
      tags: [Mechanics]
      summary: Get tickets assigned to mechanic
      security: [{ BearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Tickets for mechanic }

  /mechanics/most_tickets:
    get:
      tags: [Mechanics]
      summary: Get mechanic with most tickets
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: Mechanic with most tickets }

  /mechanics/ticket_count:
    get:
      tags: [Mechanics]
      summary: Get ticket count by mechanic
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: Ticket count by mechanic }

  # ---- INVENTORY ----
  /inventory:
    post:
      tags: [Inventory]
      summary: Create part
      security: [{ BearerAuth: [] }]
      parameters:
        - in: body
          name: body
          schema: { $ref: "#/definitions/Part" }
      responses:
        "201": { description: Part created }
        "400": { description: Bad input }

    get:
      tags: [Inventory]
      summary: Get all parts
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: List of parts }

  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Get part by ID
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: Part found }
        "404": { description: Part not found }

    put:
      tags: [Inventory]
      summary: Update part
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema: { $ref: "#/definitions/Part" }
      responses:
        "200": { description: Part updated }
        "404": { description: Part not found }

    delete:
      tags: [Inventory]
      summary: Delete part
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Part deleted }
        "404": { description: Part not found }

  # ---- SERVICE TICKETS ----
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create service ticket
      security: [{ BearerAuth: [] }]
      parameters:
        - in: body
          name: body
          schema: { $ref: "#/definitions/ServiceTicket" }
      responses:
        "201": { description: Ticket created }
        "400": { description: Invalid data }
        "401": { description: Unauthorized }

    get:
      tags: [Service Tickets]
      summary: Get all tickets
      security: [{ BearerAuth: [] }]
      responses:
        "200": { description: List of tickets }
        "401": { description: Unauthorized }

  /service_tickets/{id}:
    put:
      tags: [Service Tickets]
      summary: Update ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema: { $ref: "#/definitions/ServiceTicket" }
      responses:
        "200": { description: Ticket updated }
        "404": { description: Ticket not found }

    delete:
      tags: [Service Tickets]
      summary: Delete ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Ticket deleted }
        "404": { description: Ticket not found }

  /service_tickets/{id}/assign_mechanic:
    post:
      tags: [Service Tickets]
      summary: Assign mechanic to ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            type: object
            properties:
              mechanic_id:
                type: integer
      responses:
        "200": { description: Mechanic assigned }
        "404": { description: Ticket or mechanic not found }

  /service_tickets/{id}/add_part:
    post:
      tags: [Service Tickets]
      summary: Add part to ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            type: object
            properties:
              part_id:
                type: integer
      responses:
        "200": { description: Part added to ticket }
        "404": { description: Ticket or part not found }

  # ---- NEGATIVE TESTS ----
  /negative/bad_request:
    get:
      tags: [Negative Tests]
      summary: Example bad request test
      responses:
        "400": { description: Intentional bad request }

  /negative/unauthorized:
    get:
      tags: [Negative Tests]
      summary: Example unauthorized test
      responses:
        "401": { description: Intentional unauthorized }

# ================================
# DEFINITIONS
# ================================
definitions:
  Customer:
    type: object
    properties:
      id: { type: integer }
      name: { type: string }
      email: { type: string }
      phone: { type: string }
      car: { type: string }

  Mechanic:
    type: object
    properties:
      id: { type: integer }
      name: { type: string }
      email: { type: string }
      password_hash: { type: string }
      specialty: { type: string }
      tickets:
        type: array
        items: { $ref: "#/definitions/ServiceTicket" }

  Part:
    type: object
    properties:
      id: { type: integer }
      name: { type: string }
      description: { type: string }
      quantity: { type: integer }

  ServiceTicket:
    type: object
    properties:
      id: { type: integer }
      customer_id: { type: integer }
      mechanic_id: { type: integer }
      description: { type: string }
      status: { type: string }

  Login:
    type: object
    properties:
      email: { type: string }
      password: { type: string }
