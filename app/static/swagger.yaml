swagger: "2.0"
info:
  title: "Mechanic Shop API"
  description: "API for managing customers, mechanics, inventory, and service tickets."
  version: "1.0.0"

host: "127.0.0.1:5000"
schemes:
  - "http"
basePath: "/"
consumes:
  - "application/json"
produces:
  - "application/json"

# =========================
# Security
# =========================
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
security:
  - bearerAuth: []

tags:
  - name: Customers
  - name: Mechanics
  - name: Inventory
  - name: Service Tickets

paths:
  # =========================
  # Customers
  # =========================
  /customers:
    post:
      tags: [Customers]
      summary: Create a customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Alice Johnson"
              email:
                type: string
                example: "alice@example.com"
      responses:
        201:
          description: Customer created
        400:
          description: Missing or invalid fields
    get:
      tags: [Customers]
      summary: Get all customers (optionally search by email)
      parameters:
        - in: query
          name: email
          type: string
          required: false
          description: Search customer by email
      responses:
        200:
          description: List of customers

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update a customer
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Alice Updated"
              email:
                type: string
                example: "alice.updated@example.com"
      responses:
        200:
          description: Customer updated
        404:
          description: Customer not found
    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Customer deleted
        404:
          description: Customer not found

  # =========================
  # Mechanics
  # =========================
  /mechanics/ping:
    get:
      tags: [Mechanics]
      summary: Ping route
      responses:
        200:
          description: API is alive

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Mechanic login
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: "mike.wrench@example.com"
              password:
                type: string
                example: "mike123"
      responses:
        200:
          description: Login successful, returns JWT
        401:
          description: Invalid credentials

  /mechanics:
    post:
      tags: [Mechanics]
      summary: Create mechanic
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Mike Wrench"
              email:
                type: string
                example: "mike.wrench@example.com"
              password:
                type: string
                example: "mike123"
              specialty:
                type: string
                example: "Brakes"
      responses:
        201:
          description: Mechanic created
        409:
          description: Email already exists
    get:
      tags: [Mechanics]
      summary: Get all mechanics
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of mechanics
        401:
          description: Unauthorized

  /mechanics/{id}:
    put:
      tags: [Mechanics]
      summary: Update mechanic (self only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: body
          name: body
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Mike Updated"
              specialty:
                type: string
                example: "Engines"
              password:
                type: string
                example: "newpass123"
      responses:
        200:
          description: Mechanic updated
        403:
          description: Forbidden
        404:
          description: Mechanic not found
    delete:
      tags: [Mechanics]
      summary: Delete mechanic (self only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Mechanic deleted
        403:
          description: Forbidden
        404:
          description: Mechanic not found

  /mechanics/my-tickets:
    get:
      tags: [Mechanics]
      summary: Get mechanic's assigned tickets
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of tickets

  /mechanics/top:
    get:
      tags: [Mechanics]
      summary: Get mechanic with most tickets
      security:
        - bearerAuth: []
      responses:
        200:
          description: Mechanic with most tickets
        404:
          description: No mechanics found

  /mechanics/ticket-count:
    get:
      tags: [Mechanics]
      summary: List mechanics by ticket count
      security:
        - bearerAuth: []
      responses:
        200:
          description: Mechanics sorted by ticket count

  # =========================
  # Inventory
  # =========================
  /inventory:
    post:
      tags: [Inventory]
      summary: Create inventory part
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Brake Pads"
              price:
                type: number
                example: 50.0
      responses:
        201:
          description: Part created
        400:
          description: Missing fields
    get:
      tags: [Inventory]
      summary: Get all inventory parts
      responses:
        200:
          description: List of parts

  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Get part by ID
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Part details
        404:
          description: Part not found
    put:
      tags: [Inventory]
      summary: Update part
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: body
          name: body
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Rotor"
              price:
                type: number
                example: 75.0
      responses:
        200:
          description: Part updated
        404:
          description: Part not found
    delete:
      tags: [Inventory]
      summary: Delete part
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Part deleted
        404:
          description: Part not found

  # =========================
  # Service Tickets
  # =========================
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create a service ticket
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
                example: "Brake replacement"
              customer_id:
                type: integer
                example: 1
              mechanic_id:
                type: integer
                example: 2
      responses:
        201:
          description: Ticket created
        400:
          description: Missing fields
    get:
      tags: [Service Tickets]
      summary: Get all service tickets
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of tickets

  /service_tickets/{id}:
    get:
      tags: [Service Tickets]
      summary: Get ticket by ID
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Ticket details
        404:
          description: Ticket not found
    put:
      tags: [Service Tickets]
      summary: Update a service ticket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
                example: "Updated service description"
      responses:
        200:
          description: Ticket updated
        404:
          description: Ticket not found
    delete:
      tags: [Service Tickets]
      summary: Delete a service ticket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          type: integer
          required: true
      responses:
        200:
          description: Ticket deleted
        404:
          description: Ticket not found
