swagger: "2.0" # Swagger/OpenAPI version
info: # Info block shown at top of Swagger UI
  title: "Mechanic Shop API" # API title
  description: "API to manage cars, customers, mechanics, service tickets, and inventory for the shop"
  version: "0.0.1" # Current API version

host: "127.0.0.1:5000" # Base URL where API is served (localhost for dev)
schemes: # Supported protocols
  - "http"

consumes: # What input format does the API accept?
  - "application/json" # Accepts JSON input
produces: # What output format does the API return?
  - "application/json" # Returns JSON output

securityDefinitions: # Defines how auth works in this API
  bearerAuth: # Name of the security scheme
    type: apiKey # API key style (works for JWT tokens)
    name: Authorization # Header name
    in: header # Token goes in the header

# ======================================================
# ROUTES SECTION — each endpoint defined under "paths"
# ======================================================
paths:
  /users/login: # Login route path
    post: # HTTP method: POST
      tags:
        - Users # Groups this under "Users" category in Swagger UI
      summary: "Login endpoint (generates a token)" # Short label
      description: "Validates user credentials (email + password) and returns an auth token." # Longer description

      parameters: # What data is required for this request?
        - in: "body" # Data comes from the request body
          name: "body" # Parameter name
          description: "Login credentials (email + password)" # Explanation
          required: true # Must be included
          schema: # Reference shape of data
            $ref: "#/definitions/LoginCredentials"

      responses: # Possible responses from this endpoint
        200:
          description: "Login successful" # Success response
          schema:
            $ref: "#/definitions/LoginResponse" # Uses LoginResponse definition
        401:
          description: "Invalid credentials" # Bad login attempt
        500:
          description: "Server error while processing login" # Internal failure

  /customers: # Customers main endpoint
    post: # Create customer
      tags:
        - Customers
      summary: "Create customer"
      description: "Registers a new customer in the database."
      parameters:
        - in: "body"
          name: "body"
          description: "Customer registration data"
          required: true
          schema:
            $ref: "#/definitions/CustomerPayload"
      responses:
        201:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
        400:
          description: "Validation error"
        409:
          description: "Email already exists"
        500:
          description: "Server error while creating customer"

    get: # Get all customers
      tags:
        - Customers
      summary: "Get all customers"
      description: "Returns all customers (cached). Requires authentication token."
      security: # Reference to bearerAuth
        - bearerAuth: []
      responses:
        200:
          description: "Customer list"
          schema:
            $ref: "#/definitions/CustomersList"
        401:
          description: "Unauthorized"
        500:
          description: "Server error while retrieving customers"

  /customers/search: # Search by email
    get:
      tags:
        - Customers
      summary: "Search customer by email"
      description: "Finds a customer by email. Requires token."
      security: # Reference to bearerAuth
        - bearerAuth: []
      parameters:
        - name: "email"
          in: "query"
          description: "Email address to search"
          required: true
          type: string
      responses:
        200:
          description: "Customer found"
          schema:
            $ref: "#/definitions/CustomerResponse"
        400:
          description: "Missing email parameter"
        401:
          description: "Unauthorized"
        404:
          description: "Customer not found"

  /customers/{id}: # Customer-specific operations
    put: # Update customer
      tags:
        - Customers
      summary: "Update customer"
      description: "Updates customer details by ID. Requires token."
      security: # Reference to bearerAuth
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the customer"
          required: true
          type: integer
        - in: "body"
          name: "body"
          description: "Updated customer information"
          required: true
          schema:
            $ref: "#/definitions/CustomerPayload"
      responses:
        200:
          description: "Customer updated successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
        400:
          description: "Invalid update data"
        401:
          description: "Unauthorized"
        404:
          description: "Customer not found"
        409:
          description: "Email already exists"
        500:
          description: "Server error while updating customer"

    delete: # Delete customer
      tags:
        - Customers
      summary: "Delete customer"
      description: "Deletes a customer by ID. Requires token."
      security: # Reference to bearerAuth
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the customer"
          required: true
          type: integer
      responses:
        200:
          description: "Customer deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"
        401:
          description: "Unauthorized"
        404:
          description: "Customer not found"
        500:
          description: "Server error while deleting customer"

# ======================================================
# DEFINITIONS SECTION — reusable models referenced above
# ======================================================
definitions:
  # --- Auth Models ---
  LoginCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    example:
      email: "john@example.com"
      password: "password123"

  LoginResponse:
    type: object
    properties:
      token:
        type: string
      message:
        type: string
      status:
        type: string
    example:
      token: "abc123"
      message: "Welcome back, John!"
      status: "success"

  # --- Customer Models ---
  CustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string
    required:
      - name
      - email
      - phone
      - password
    example:
      name: "Jane Doe"
      email: "jane@example.com"
      phone: "123-456-7890"
      password: "securePass123"

  CustomerResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
    example:
      id: 1
      name: "Jane Doe"
      email: "jane@example.com"
      phone: "123-456-7890"

  CustomersList:
    type: array
    items:
      $ref: "#/definitions/CustomerResponse"
    example:
      - id: 1
        name: "Jane Doe"
        email: "jane@example.com"
        phone: "123-456-7890"
      - id: 2
        name: "John Smith"
        email: "john@example.com"
        phone: "555-555-5555"

  DeleteResponse:
    type: object
    properties:
      message:
        type: string
    example:
      message: "Customer deleted successfully."
