swagger: "2.0"
info:
  version: "1.0.0"
  title: "Mechanic Shop API"
  description: "API for managing customers, mechanics, parts, and service tickets."

host: "mechanics-api.onrender.com"
basePath: "/"
schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

# ================================
# SECURITY
# ================================
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: |
      JWT Authorization header using the Bearer scheme.  
      Example: "Bearer {token}"

# ================================
# TAGS
# ================================
tags:
  - name: Customers
    description: "Customer management"
  - name: Mechanics
    description: "Mechanic registration, login, and management"
  - name: Parts
    description: "Parts (Inventory) management"
  - name: Service Tickets
    description: "Service ticket creation and tracking"

# ================================
# PATHS
# ================================
paths:
  # ---- CUSTOMERS ----
  /customers:
    post:
      tags: [Customers]
      summary: Create a new customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "201":
          description: Customer created
        "400":
          description: Bad Request
        "409":
          description: Conflict (email exists)

    get:
      tags: [Customers]
      summary: Get all customers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of customers

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "200":
          description: Customer updated
        "404":
          description: Customer not found

    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Customer deleted
        "404":
          description: Customer not found

  # ---- MECHANICS ----
  /mechanics:
    post:
      tags: [Mechanics]
      summary: Create a mechanic
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Mechanic"
      responses:
        "201":
          description: Mechanic created
        "400":
          description: Invalid input
        "409":
          description: Email exists

    get:
      tags: [Mechanics]
      summary: Get all mechanics
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of mechanics
        "401":
          description: Unauthorized

  # ---- PARTS (Inventory) ----
  /inventory:
    post:
      tags: [Parts]
      summary: Create part
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Part"
      responses:
        "201":
          description: Part created
        "400":
          description: Bad input

    get:
      tags: [Parts]
      summary: Get all parts
      responses:
        "200":
          description: List of parts

  /inventory/{id}:
    put:
      tags: [Parts]
      summary: Update a part
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Part"
      responses:
        "200":
          description: Part updated
        "404":
          description: Part not found

    delete:
      tags: [Parts]
      summary: Delete a part
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Part deleted
        "404":
          description: Part not found

  # ---- SERVICE TICKETS ----
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create service ticket
      security:
        - BearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/ServiceTicket"
      responses:
        "201":
          description: Ticket created
        "400":
          description: Invalid data
        "401":
          description: Unauthorized

    get:
      tags: [Service Tickets]
      summary: Get all tickets
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of tickets
        "401":
          description: Unauthorized

  # ---- AUTH ----
  /login:
    post:
      tags: [Mechanics]
      summary: Login a mechanic
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: Successful login (returns JWT token)
        "400":
          description: Invalid credentials

# ================================
# DEFINITIONS
# ================================
definitions:
  Customer:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      car:
        type: string

  Mechanic:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      email:
        type: string
      password_hash:
        type: string
      specialty:
        type: string
      tickets:
        type: array
        items:
          $ref: "#/definitions/ServiceTicket"

  Part:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      quantity:
        type: integer

  ServiceTicket:
    type: object
    properties:
      id:
        type: integer
      customer_id:
        type: integer
      mechanic_id:
        type: integer
      description:
        type: string
      status:
        type: string

  Login:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
