openapi: 3.0.1
info:
  title: Mechanic Workshop API
  version: 1.0.0
  description: >
    Flask backend for managing mechanics, customers, inventory, and service tickets.
    Includes authentication for mechanics with JWT tokens.

servers:
  - url: http://127.0.0.1:5000
    description: Local development server
  - url: https://mechanics-api.onrender.com
    description: Production server

tags:
  - name: Mechanics
  - name: Customers
  - name: Inventory
  - name: ServiceTickets
  - name: NegativeTests

paths:
  # ---------------- Mechanics ----------------
  /mechanics/ping:
    get:
      tags: [Mechanics]
      summary: Check if the server is running
      responses:
        "200":
          description: Server is running

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login Mechanic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: alex@shop.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

  /mechanics:
    post:
      tags: [Mechanics]
      summary: Register new mechanic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: Alex Rivera
                email: alex@shop.com
                password: password123
                specialty: Brakes
      responses:
        "201":
          description: Mechanic created
    get:
      tags: [Mechanics]
      summary: Get all mechanics
      responses:
        "200":
          description: List of all mechanics

  /mechanics/{id}:
    put:
      tags: [Mechanics]
      summary: Update mechanic profile
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: Alex Rivera
                specialty: Suspension
      responses:
        "200":
          description: Mechanic updated
    delete:
      tags: [Mechanics]
      summary: Delete mechanic
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 2 }
      responses:
        "200":
          description: Mechanic deleted

  /mechanics/my-tickets:
    get:
      tags: [Mechanics]
      summary: Get tickets assigned to logged-in mechanic
      responses:
        "200":
          description: List of tickets for mechanic

  /mechanics/top:
    get:
      tags: [Mechanics]
      summary: Mechanic with most tickets
      responses:
        "200":
          description: Top mechanic by ticket count

  # ---------------- Customers ----------------
  /customers:
    get:
      tags: [Customers]
      summary: Get all customers
      responses:
        "200":
          description: List of customers
    post:
      tags: [Customers]
      summary: Create new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: John Doe
                email: john@example.com
                phone: 312-555-1111
                car: Honda Civic
      responses:
        "201":
          description: Customer created

  /customers/search:
    get:
      tags: [Customers]
      summary: Search customer by email
      parameters:
        - name: email
          in: query
          required: true
          schema: { type: string, example: john@example.com }
      responses:
        "200":
          description: Matching customer found

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update existing customer
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                phone: 312-555-2222
                car: Honda Accord
      responses:
        "200":
          description: Customer updated
    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 2 }
      responses:
        "200":
          description: Customer deleted

  # ---------------- Inventory ----------------
  /inventory:
    get:
      tags: [Inventory]
      summary: Get all inventory parts
      responses:
        "200":
          description: List of parts
    post:
      tags: [Inventory]
      summary: Add a new part to inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: Brake Pads
                price: 49.99
                quantity: 20
      responses:
        "201":
          description: Part added to inventory

  /inventory/{id}:
    get:
      tags: [Inventory]
      summary: Get part by ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      responses:
        "200":
          description: Part details
    put:
      tags: [Inventory]
      summary: Update inventory part
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: Oil Filter
                price: 10.99
                quantity: 60
      responses:
        "200":
          description: Part updated
    delete:
      tags: [Inventory]
      summary: Delete inventory part
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, example: 2 }
      responses:
        "200":
          description: Part deleted

  # ---------------- Service Tickets ----------------
  /service_tickets:
    get:
      tags: [ServiceTickets]
      summary: Get all service tickets
      responses:
        "200":
          description: List of service tickets
    post:
      tags: [ServiceTickets]
      summary: Create new service ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                description: Brake pad replacement
                customer_id: 1
      responses:
        "201":
          description: Service ticket created

  /service_tickets/{ticket_id}:
    put:
      tags: [ServiceTickets]
      summary: Update a service ticket
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                description: Replace brake pads and rotors
      responses:
        "200":
          description: Ticket updated
    delete:
      tags: [ServiceTickets]
      summary: Delete a service ticket
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema: { type: integer, example: 2 }
      responses:
        "200":
          description: Ticket deleted

  /service_tickets/{ticket_id}/assign/{mech_id}:
    post:
      tags: [ServiceTickets]
      summary: Assign mechanic to a ticket
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema: { type: integer, example: 1 }
        - name: mech_id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      responses:
        "200":
          description: Mechanic assigned to ticket

  /service_tickets/{ticket_id}/parts:
    post:
      tags: [ServiceTickets]
      summary: Add parts to service ticket
      parameters:
        - name: ticket_id
          in: path
          required: true
          schema: { type: integer, example: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                parts:
                  - part_id: 1
                    quantity: 2
      responses:
        "201":
          description: Parts added to ticket

  # ---------------- Negative Tests ----------------
  /negative/mechanics-no-token:
    get:
      tags: [NegativeTests]
      summary: Get mechanics without token
      responses:
        "401":
          description: Unauthorized

  /negative/customer-missing-email:
    post:
      tags: [NegativeTests]
      summary: Attempt to create customer with missing email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: Missing Email Test
      responses:
        "400":
          description: Invalid input
