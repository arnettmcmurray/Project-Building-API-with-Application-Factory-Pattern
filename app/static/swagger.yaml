openapi: 3.0.1
info:
  title: Mechanic Workshop API
  version: 3.0.0
  description: >
    Flattened JSON-body version. Every route takes JSON input.
servers:
  - url: http://127.0.0.1:5000
    description: Local Development
  - url: https://mechanics-api.onrender.com
    description: Production Deployment

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: Customers
  - name: Mechanics
  - name: Parts
  - name: Service Tickets

paths:
  ###################
  # CUSTOMERS
  ###################
  /customers/create:
    post:
      tags: [Customers]
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "John Doe"
              email: "john@example.com"
              phone: "312-555-1111"
              car: "Honda Civic"
      responses:
        201:
          description: Customer created

  /customers/get_all:
    post:
      tags: [Customers]
      summary: Get all customers
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: List of customers

  /customers/get_one:
    post:
      tags: [Customers]
      summary: Get a single customer by ID
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
      responses:
        200:
          description: Single customer returned

  /customers/update:
    put:
      tags: [Customers]
      summary: Update a customer
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
              name: "Jane Doe"
              email: "jane@example.com"
              phone: "312-555-2222"
              car: "Toyota Corolla"
      responses:
        200:
          description: Customer updated

  /customers/delete:
    delete:
      tags: [Customers]
      summary: Delete a customer
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
      responses:
        200:
          description: Customer deleted

  ###################
  # MECHANICS
  ###################
  /mechanics/create:
    post:
      tags: [Mechanics]
      summary: Register mechanic
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Alex Rivera"
              email: "alex@shop.com"
              password: "password123"
              specialty: "Brakes"
      responses:
        201:
          description: Mechanic created

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login mechanic
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: "alex@shop.com"
              password: "password123"
      responses:
        200:
          description: JWT token returned

  /mechanics/get_all:
    post:
      tags: [Mechanics]
      summary: Get all mechanics
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: List of mechanics

  /mechanics/get_one:
    post:
      tags: [Mechanics]
      summary: Get one mechanic by ID
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
      responses:
        200:
          description: Mechanic returned

  /mechanics/update:
    put:
      tags: [Mechanics]
      summary: Update mechanic
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 2
              name: "Alex R."
              specialty: "Engine Repair"
              password: "newpass123"
      responses:
        200:
          description: Mechanic updated

  /mechanics/delete:
    delete:
      tags: [Mechanics]
      summary: Delete mechanic
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 2
      responses:
        200:
          description: Mechanic deleted

  /mechanics/my_tickets:
    post:
      tags: [Mechanics]
      summary: Get mechanicâ€™s assigned tickets
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: List of tickets or message

  /mechanics/top:
    post:
      tags: [Mechanics]
      summary: Get top mechanic by ticket count
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: Returns top mechanic data

  ###################
  # PARTS (INVENTORY)
  ###################
  /parts/create:
    post:
      tags: [Parts]
      summary: Create a new part
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: "Oil Filter"
              price: 9.99
              quantity: 50
      responses:
        201:
          description: Part created

  /parts/get_all:
    post:
      tags: [Parts]
      summary: Get all parts
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: List of parts

  /parts/get_one:
    post:
      tags: [Parts]
      summary: Get a single part
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
      responses:
        200:
          description: Part returned

  /parts/update:
    put:
      tags: [Parts]
      summary: Update part
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
              name: "Premium Oil Filter"
              price: 12.99
              quantity: 75
      responses:
        200:
          description: Part updated

  /parts/delete:
    delete:
      tags: [Parts]
      summary: Delete part
      requestBody:
        required: true
        content:
          application/json:
            example:
              id: 1
      responses:
        200:
          description: Part deleted

  ###################
  # SERVICE TICKETS
  ###################
  /service_tickets/create:
    post:
      tags: [Service Tickets]
      summary: Create a new service ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              description: "Brake pad replacement"
              status: "Open"
              customer_id: 1
      responses:
        201:
          description: Ticket created

  /service_tickets/get_all:
    post:
      tags: [Service Tickets]
      summary: Get all service tickets
      requestBody:
        required: false
        content:
          application/json:
            example:
              filter: "optional"
      responses:
        200:
          description: List of tickets

  /service_tickets/get_one:
    post:
      tags: [Service Tickets]
      summary: Get one ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
      responses:
        200:
          description: Single ticket returned

  /service_tickets/update:
    put:
      tags: [Service Tickets]
      summary: Update a ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
              description: "Updated brake and rotor replacement"
              status: "Closed"
      responses:
        200:
          description: Ticket updated

  /service_tickets/delete:
    delete:
      tags: [Service Tickets]
      summary: Delete a ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
      responses:
        200:
          description: Ticket deleted

  /service_tickets/assign:
    post:
      tags: [Service Tickets]
      summary: Assign mechanic to a ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
              mech_id: 2
      responses:
        200:
          description: Mechanic assigned

  /service_tickets/remove:
    post:
      tags: [Service Tickets]
      summary: Remove mechanic from ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
              mech_id: 2
      responses:
        200:
          description: Mechanic removed

  /service_tickets/add_parts:
    post:
      tags: [Service Tickets]
      summary: Add parts to ticket
      requestBody:
        required: true
        content:
          application/json:
            example:
              ticket_id: 1
              parts:
                - part_id: 1
                - part_id: 2
      responses:
        201:
          description: Parts added
