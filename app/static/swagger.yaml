swagger: "2.0" # Swagger/OpenAPI version

info: # Info block shown at top of Swagger UI
  title: "Mechanic Shop API" # API title
  description: "API to manage cars, customers, mechanics, service tickets, and inventory for the shop"
  version: "0.0.1" # Current API version

host: "127.0.0.1:5000" # Base URL where API is served (localhost for dev)
schemes: # Supported protocols
  - "http"

consumes: # What input format does the API accept?
  - "application/json" # Accepts JSON input
produces: # What output format does the API return?
  - "application/json" # Returns JSON output

# ======================================================
# SECURITY DEFINITIONS
# ======================================================
securityDefinitions: # Defines how auth works in this API
  bearerAuth: # Name of the security scheme
    type: apiKey # API key style (works for JWT tokens)
    name: Authorization # Header name
    in: header # Token goes in the header

# ======================================================
# ROUTES SECTION â€” each endpoint defined under "paths"
# ======================================================
paths:
  # ===================== CUSTOMERS =====================
  /customers:
    post:
      tags: [Customers]
      summary: "Create customer"
      description: "Registers a new customer in the database."
      parameters:
        - in: body
          name: body
          description: "Customer registration data"
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        201:
          description: "Customer created successfully"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Validation error" }
        409: { description: "Email already exists" }
        500: { description: "Server error while creating customer" }

    get:
      tags: [Customers]
      summary: "Get all customers"
      description: "Returns all customers (cached). Requires authentication token."
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: "Customer list"
          schema: { $ref: "#/definitions/CustomersList" }
        401: { description: "Unauthorized" }
        500: { description: "Server error while retrieving customers" }

  /customers/search:
    get:
      tags: [Customers]
      summary: "Search customer by email"
      description: "Finds a customer by email. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: email
          in: query
          description: "Email address to search"
          required: true
          type: string
      responses:
        200:
          description: "Customer found"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Missing email parameter" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }

  /customers/{id}:
    put:
      tags: [Customers]
      summary: "Update customer"
      description: "Updates customer details by ID. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: id
          in: path
          description: "ID of the customer"
          required: true
          type: integer
        - in: body
          name: body
          description: "Updated customer information"
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        200:
          description: "Customer updated successfully"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Invalid update data" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }
        409: { description: "Email already exists" }
        500: { description: "Server error while updating customer" }

    delete:
      tags: [Customers]
      summary: "Delete customer"
      description: "Deletes a customer by ID. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: id
          in: path
          description: "ID of the customer"
          required: true
          type: integer
      responses:
        200:
          description: "Customer deleted successfully"
          schema: { $ref: "#/definitions/DeleteResponse" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }
        500: { description: "Server error while deleting customer" }

