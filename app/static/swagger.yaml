swagger: "2.0"

info:
  title: "Mechanic Shop API"
  description: "API to manage cars, customers, mechanics, service tickets, and inventory for the shop"
  version: "0.0.1"

host: "127.0.0.1:5000"
schemes:
  - "http"

consumes:
  - "application/json"
produces:
  - "application/json"

# ======================================================
# SECURITY
# ======================================================
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

# ======================================================
# ROUTES
# ======================================================
paths:
  # ===================== CUSTOMERS =====================
  /customers:
    post:
      tags: [Customers]
      summary: "Create customer"
      parameters:
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        201: { description: "Customer created successfully" }

    get:
      tags: [Customers]
      summary: "Get all customers"
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: "Customer list"
          schema: { $ref: "#/definitions/CustomersList" }

  /customers/search:
    get:
      tags: [Customers]
      summary: "Search customer by email"
      security: [{ bearerAuth: [] }]
      parameters:
        - name: email
          in: query
          type: string
          required: true
      responses:
        200:
          description: "Customer found"
          schema: { $ref: "#/definitions/CustomerResponse" }

  /customers/{id}:
    put:
      tags: [Customers]
      summary: "Update customer"
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          type: integer
          required: true
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        200: { description: "Updated" }

    delete:
      tags: [Customers]
      summary: "Delete customer"
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      responses:
        200: { description: "Deleted" }

  # ===================== MECHANICS =====================
  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: "Login mechanic"
      parameters:
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/LoginCredentials" }
      responses:
        200: { description: "Login success" }

  /mechanics:
    post:
      tags: [Mechanics]
      summary: "Create mechanic"
      parameters:
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/MechanicPayload" }
      responses:
        201: { description: "Created" }
    get:
      tags: [Mechanics]
      summary: "Get mechanics"
      security: [{ bearerAuth: [] }]
      responses:
        200: { description: "List" }

  /mechanics/{id}:
    put:
      tags: [Mechanics]
      summary: "Update mechanic"
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          type: integer
          required: true
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/MechanicPayload" }
      responses:
        200: { description: "Updated" }

    delete:
      tags: [Mechanics]
      summary: "Delete mechanic"
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      responses:
        200: { description: "Deleted" }

  /mechanics/ping:
    get:
      tags: [Mechanics]
      summary: "Ping"
      responses:
        200: { description: "OK" }

  /mechanics/my-tickets:
    get:
      tags: [Mechanics]
      summary: "My tickets"
      security: [{ bearerAuth: [] }]
      responses:
        200: { description: "List of tickets" }

  # ===================== SERVICE TICKETS =====================
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: "Create ticket"
      parameters:
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/TicketPayload" }
      responses:
        201: { description: "Created" }

    get:
      tags: [Service Tickets]
      summary: "Get all tickets"
      responses:
        200:
          description: "List"
          schema:
            type: array
            items: { $ref: "#/definitions/TicketResponse" }

  /service_tickets/{ticket_id}:
    get:
      tags: [Service Tickets]
      summary: "Get ticket"
      parameters:
        - name: ticket_id
          in: path
          type: integer
          required: true
      responses:
        200: { description: "Found" }
    put:
      tags: [Service Tickets]
      summary: "Update ticket"
      parameters:
        - name: ticket_id
          in: path
          type: integer
          required: true
        - in: body
          name: body
          required: true
          schema: { $ref: "#/definitions/TicketPayload" }
      responses:
        200: { description: "Updated" }
    delete:
      tags: [Service Tickets]
      summary: "Delete ticket"
      parameters:
        - name: ticket_id
          in: path
          type: integer
          required: true
      responses:
        200: { description: "Deleted" }

  /service_tickets/paginated:
    get:
      tags: [Service Tickets]
      summary: "Get paginated"
      parameters:
        - name: page
          in: query
          type: integer
        - name: per_page
          in: query
          type: integer
      responses:
        200:
          description: "Paginated list"
          schema:
            type: array
            items: { $ref: "#/definitions/TicketResponse" }

  # ===================== INVENTORY =====================
  /inventory:
    get:
      tags: [Inventory]
      summary: "Get inventory"
      responses:
        200:
          description: "Inventory list"
          schema: { $ref: "#/definitions/InventoryList" }

# ======================================================
# DEFINITIONS WITH EXAMPLES
# ======================================================
definitions:
  # ---- Customers ----
  CustomerPayload:
    type: object
    properties:
      name: { type: string }
      email: { type: string }
      phone: { type: string }
      car: { type: string }
    example:
      name: "Jane Doe"
      email: "jane@example.com"
      phone: "555-111-2222"
      car: "Toyota Corolla"

  CustomerResponse:
    allOf:
      - $ref: "#/definitions/CustomerPayload"
      - type: object
        properties:
          id: { type: integer }
    example:
      id: 1
      name: "Jane Doe"
      email: "jane@example.com"
      phone: "555-111-2222"
      car: "Toyota Corolla"

  CustomersList:
    type: array
    items: { $ref: "#/definitions/CustomerResponse" }
    example:
      - id: 1
        name: "Jane Doe"
        email: "jane@example.com"
        phone: "555-111-2222"
        car: "Toyota Corolla"

  DeleteResponse:
    type: object
    properties:
      message: { type: string }
    example:
      message: "Customer deleted successfully"

  # ---- Mechanics ----
  MechanicPayload:
    type: object
    properties:
      name: { type: string }
      email: { type: string }
      specialty: { type: string }
      password: { type: string }
    example:
      name: "Mike Wrench"
      email: "mike@example.com"
      specialty: "Engine Repair"
      password: "test123"

  MechanicResponse:
    allOf:
      - $ref: "#/definitions/MechanicPayload"
      - type: object
        properties:
          id: { type: integer }
    example:
      id: 1
      name: "Mike Wrench"
      email: "mike@example.com"
      specialty: "Engine Repair"

  MechanicsList:
    type: array
    items: { $ref: "#/definitions/MechanicResponse" }
    example:
      - id: 1
        name: "Mike Wrench"
        email: "mike@example.com"
        specialty: "Engine Repair"

  LoginCredentials:
    type: object
    properties:
      email: { type: string }
      password: { type: string }
    example:
      email: "mike@example.com"
      password: "test123"

  LoginResponse:
    type: object
    properties:
      token: { type: string }
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  # ---- Service Tickets ----
  TicketPayload:
    type: object
    properties:
      description: { type: string }
      customer_id: { type: integer }
      mechanic_id: { type: integer }
      date: { type: string, format: date-time }
    example:
      description: "Oil change and filter replacement"
      customer_id: 1
      mechanic_id: 1
      date: "2025-08-27T10:00:00Z"

  TicketResponse:
    allOf:
      - $ref: "#/definitions/TicketPayload"
      - type: object
        properties:
          id: { type: integer }
    example:
      id: 1
      description: "Oil change and filter replacement"
      customer_id: 1
      mechanic_id: 1
      date: "2025-08-27T10:00:00Z"

  TicketList:
    type: array
    items: { $ref: "#/definitions/TicketResponse" }
    example:
      - id: 1
        description: "Oil change and filter replacement"
        customer_id: 1
        mechanic_id: 1
        date: "2025-08-27T10:00:00Z"

  # ---- Inventory ----
  InventoryItem:
    type: object
    properties:
      id: { type: integer }
      name: { type: string }
      quantity: { type: integer }
    example:
      id: 10
      name: "Brake Pads"
      quantity: 25

  InventoryList:
    type: array
    items: { $ref: "#/definitions/InventoryItem" }
    example:
      - id: 10
        name: "Brake Pads"
        quantity: 25
      - id: 11
        name: "Oil Filter"
        quantity: 50
