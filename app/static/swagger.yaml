swagger: "2.0" # Swagger/OpenAPI version

info: # Info block shown at top of Swagger UI
  title: "Mechanic Shop API" # API title
  description: "API to manage cars, customers, mechanics, service tickets, and inventory for the shop"
  version: "0.0.1" # Current API version

host: "127.0.0.1:5000" # Base URL where API is served (localhost for dev)
schemes: # Supported protocols
  - "http"

consumes: # What input format does the API accept?
  - "application/json" # Accepts JSON input
produces: # What output format does the API return?
  - "application/json" # Returns JSON output

# ======================================================
# SECURITY DEFINITIONS
# ======================================================
securityDefinitions: # Defines how auth works in this API
  bearerAuth: # Name of the security scheme
    type: apiKey # API key style (works for JWT tokens)
    name: Authorization # Header name
    in: header # Token goes in the header

# ======================================================
# ROUTES SECTION — each endpoint defined under "paths"
# ======================================================
paths:
  # ===================== CUSTOMERS =====================
  /customers:
    post:
      tags: [Customers]
      summary: "Create customer"
      description: "Registers a new customer in the database."
      parameters:
        - in: body
          name: body
          description: "Customer registration data"
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        201:
          description: "Customer created successfully"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Validation error" }
        409: { description: "Email already exists" }
        500: { description: "Server error while creating customer" }

    get:
      tags: [Customers]
      summary: "Get all customers"
      description: "Returns all customers (cached). Requires authentication token."
      security: [{ bearerAuth: [] }]
      responses:
        200:
          description: "Customer list"
          schema: { $ref: "#/definitions/CustomersList" }
        401: { description: "Unauthorized" }
        500: { description: "Server error while retrieving customers" }

  /customers/search:
    get:
      tags: [Customers]
      summary: "Search customer by email"
      description: "Finds a customer by email. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: email
          in: query
          description: "Email address to search"
          required: true
          type: string
      responses:
        200:
          description: "Customer found"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Missing email parameter" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }

  /customers/{id}:
    put:
      tags: [Customers]
      summary: "Update customer"
      description: "Updates customer details by ID. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: id
          in: path
          description: "ID of the customer"
          required: true
          type: integer
        - in: body
          name: body
          description: "Updated customer information"
          required: true
          schema: { $ref: "#/definitions/CustomerPayload" }
      responses:
        200:
          description: "Customer updated successfully"
          schema: { $ref: "#/definitions/CustomerResponse" }
        400: { description: "Invalid update data" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }
        409: { description: "Email already exists" }
        500: { description: "Server error while updating customer" }

    delete:
      tags: [Customers]
      summary: "Delete customer"
      description: "Deletes a customer by ID. Requires token."
      security: [{ bearerAuth: [] }] #security auth
      parameters:
        - name: id
          in: path
          description: "ID of the customer"
          required: true
          type: integer
      responses:
        200:
          description: "Customer deleted successfully"
          schema: { $ref: "#/definitions/DeleteResponse" }
        401: { description: "Unauthorized" }
        404: { description: "Customer not found" }
        500: { description: "Server error while deleting customer" }

  # ======================================================
  # MECHANICS ROUTES — all endpoints under /mechanics
  # ======================================================
  /mechanics/login: # Mechanic login (token generator)
    post:
      tags:
        - Mechanics
      summary: "Mechanic login (generates token)"
      description: "Validates mechanic credentials (email + password) and returns an auth token."
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Invalid credentials"
        500:
          description: "Server error while processing login"

  /mechanics: # Base mechanics endpoint
    post: # Create new mechanic
      tags:
        - Mechanics
      summary: "Register mechanic"
      description: "Registers a new mechanic in the database."
      parameters:
        - in: "body"
          name: "body"
          description: "Mechanic registration data"
          required: true
          schema:
            $ref: "#/definitions/MechanicPayload"
      responses:
        201:
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
        400:
          description: "Validation error"
        409:
          description: "Email already exists"
        500:
          description: "Server error while creating mechanic"

    get: # Get all mechanics
      tags:
        - Mechanics
      summary: "Get all mechanics"
      description: "Returns all mechanics in the shop. Requires authentication."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Mechanics list"
          schema:
            $ref: "#/definitions/MechanicsList"
        401:
          description: "Unauthorized"
        500:
          description: "Server error while retrieving mechanics"

  /mechanics/{id}: # Mechanic-specific operations
    put:
      tags:
        - Mechanics
      summary: "Update mechanic"
      description: "Update mechanic details by ID. Requires token."
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the mechanic"
          required: true
          type: integer
        - in: "body"
          name: "body"
          description: "Updated mechanic data"
          required: true
          schema:
            $ref: "#/definitions/MechanicPayload"
      responses:
        200:
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
        400:
          description: "Invalid update data"
        401:
          description: "Unauthorized"
        404:
          description: "Mechanic not found"
        500:
          description: "Server error while updating mechanic"

    delete:
      tags:
        - Mechanics
      summary: "Delete mechanic"
      description: "Deletes mechanic by ID. Requires token."
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the mechanic"
          required: true
          type: integer
      responses:
        200:
          description: "Mechanic deleted successfully"
          schema:
            $ref: "#/definitions/DeleteResponse"
        401:
          description: "Unauthorized"
        404:
          description: "Mechanic not found"
        500:
          description: "Server error while deleting mechanic"

  /mechanics/ping:
    get:
      tags:
        - Mechanics
      summary: "Ping mechanics"
      description: "Basic test route for mechanics service."
      responses:
        200:
          description: "Pong response"
        500:
          description: "Server error"

  /mechanics/top:
    get:
      tags:
        - Mechanics
      summary: "Top mechanics"
      description: "Retrieve list of mechanics ranked by performance."
      responses:
        200:
          description: "Top mechanics returned"
          schema:
            $ref: "#/definitions/MechanicsList"
        500:
          description: "Server error"

  /mechanics/ticket-count:
    get:
      tags:
        - Mechanics
      summary: "Mechanic ticket count"
      description: "Retrieve the count of tickets handled by each mechanic."
      responses:
        200:
          description: "Ticket counts returned"
        500:
          description: "Server error"

  /mechanics/my-tickets:
    get:
      tags:
        - Mechanics
      summary: "Mechanic tickets"
      description: "Get all tickets assigned to the currently logged-in mechanic."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of mechanic's tickets"
          schema:
            $ref: "#/definitions/TicketList"
        401:
          description: "Unauthorized"
        500:
          description: "Server error while retrieving tickets"
# ================================
# SERVICE TICKETS
# ================================
/service_tickets: # Base ticket endpoint
  post:
    tags:
      - Service Tickets
    summary: "Create service ticket"
    description: "Opens a new service ticket for a customer and assigns a mechanic."
    parameters:
      - in: "body"
        name: "body"
        description: "Ticket details payload"
        required: true
        schema:
          $ref: "#/definitions/TicketPayload"
    responses:
      201:
        description: "Service ticket created"
        schema:
          $ref: "#/definitions/TicketResponse"
      400:
        description: "Invalid ticket data"
      500:
        description: "Server error while creating ticket"

  get:
    tags:
      - Service Tickets
    summary: "Get all tickets"
    description: "Retrieve list of all service tickets."
    responses:
      200:
        description: "List of service tickets"
        schema:
          type: array
          items:
            $ref: "#/definitions/TicketResponse"
      500:
        description: "Server error while retrieving tickets"

# --- Get ticket by ID ---
/service_tickets/{ticket_id}:
  get:
    tags:
      - Service Tickets
    summary: "Get ticket by ID"
    description: "Retrieve a service ticket by its ID."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
        description: "Service ticket ID"
    responses:
      200:
        description: "Ticket retrieved successfully"
        schema:
          $ref: "#/definitions/TicketResponse"
      404:
        description: "Ticket not found"
      500:
        description: "Server error while retrieving ticket"

  put:
    tags:
      - Service Tickets
    summary: "Update ticket"
    description: "Update ticket details by ID."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
      - in: body
        name: body
        description: "Updated ticket data"
        required: true
        schema:
          $ref: "#/definitions/TicketPayload"
    responses:
      200:
        description: "Ticket updated successfully"
        schema:
          $ref: "#/definitions/TicketResponse"
      400:
        description: "Invalid update data"
      404:
        description: "Ticket not found"
      500:
        description: "Server error while updating ticket"

  delete:
    tags:
      - Service Tickets
    summary: "Delete ticket"
    description: "Deletes a service ticket by ID."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
    responses:
      200:
        description: "Ticket deleted successfully"
      404:
        description: "Ticket not found"
      500:
        description: "Server error while deleting ticket"

# --- Assign mechanic to ticket ---
/service_tickets/{ticket_id}/assign/{mech_id}:
  post:
    tags:
      - Service Tickets
    summary: "Assign mechanic to ticket"
    description: "Assign a mechanic to an existing service ticket."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
      - name: mech_id
        in: path
        required: true
        type: integer
    responses:
      200:
        description: "Mechanic assigned successfully"
      404:
        description: "Ticket or mechanic not found"
      500:
        description: "Server error while assigning mechanic"

# --- Remove mechanic from ticket ---
/service_tickets/{ticket_id}/remove/{mech_id}:
  post:
    tags:
      - Service Tickets
    summary: "Remove mechanic from ticket"
    description: "Unassign a mechanic from an existing service ticket."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
      - name: mech_id
        in: path
        required: true
        type: integer
    responses:
      200:
        description: "Mechanic removed successfully"
      404:
        description: "Ticket or mechanic not found"
      500:
        description: "Server error while removing mechanic"

# --- Add parts to ticket ---
/service_tickets/{ticket_id}/parts:
  post:
    tags:
      - Service Tickets
    summary: "Add parts to ticket"
    description: "Add parts to an existing service ticket."
    parameters:
      - name: ticket_id
        in: path
        required: true
        type: integer
      - in: body
        name: body
        description: "Parts data"
        required: true
        schema:
          type: object
          properties:
            part_id:
              type: integer
            quantity:
              type: integer
    responses:
      200:
        description: "Parts added successfully"
      400:
        description: "Invalid part data"
      404:
        description: "Ticket or part not found"
      500:
        description: "Server error while adding parts"

# --- Get paginated tickets ---
/service_tickets/paginated:
  get:
    tags:
      - Service Tickets
    summary: "Get paginated tickets"
    description: "Retrieve service tickets in a paginated format."
    parameters:
      - name: page
        in: query
        required: false
        type: integer
      - name: per_page
        in: query
        required: false
        type: integer
    responses:
      200:
        description: "Paginated tickets list"
        schema:
          type: array
          items:
            $ref: "#/definitions/TicketResponse"
      500:
        description: "Server error while retrieving paginated tickets"
