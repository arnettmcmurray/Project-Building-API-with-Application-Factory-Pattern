swagger: "2.0"
info:
  title: "Mechanic Shop API"
  description: "API for managing customers, mechanics, parts, and service tickets."
  version: "1.0.0"

host: "mechanics-api.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

# ========================
# SECURITY
# ========================
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Enter: Bearer <token>"

# ========================
# TAGS (folders in UI)
# ========================
tags:
  - name: Customers
    description: "Customer management"
  - name: Mechanics
    description: "Mechanic registration, login, and management"
  - name: Parts
    description: "Parts (Inventory) management"
  - name: Service Tickets
    description: "Service ticket creation and tracking"

# ========================
# PATHS
# ========================
paths:
  # ---- CUSTOMERS ----
  /customers:
    post:
      tags: [Customers]
      summary: Create a new customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "201": { description: Customer created }
        "400": { description: Bad Request }
        "409": { description: Conflict (email exists) }
    get:
      tags: [Customers]
      summary: Get all customers
      responses:
        "200": { description: List of customers }

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "200": { description: Customer updated }
        "404": { description: Customer not found }
    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Customer deleted }
        "404": { description: Customer not found }

  # ---- MECHANICS ----
  /mechanics:
    post:
      tags: [Mechanics]
      summary: Create a mechanic
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Mechanic"
      responses:
        "201": { description: Mechanic created }
        "400": { description: Invalid input }
        "409": { description: Email exists }
    get:
      tags: [Mechanics]
      summary: Get all mechanics
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: List of mechanics }
        "401": { description: Unauthorized }

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login mechanic
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200": { description: Token returned }
        "401": { description: Invalid credentials }

  # ---- PARTS (Inventory) ----
  /inventory:
    post:
      tags: [Parts]
      summary: Create part
      security: [{ bearerAuth: [] }]
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Part"
      responses:
        "201": { description: Part created }
        "400": { description: Bad input }
    get:
      tags: [Parts]
      summary: Get all parts
      responses:
        "200": { description: List of parts }

  /inventory/{id}:
    get:
      tags: [Parts]
      summary: Get part by ID
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200": { description: Part found }
        "404": { description: Not found }

  # ---- SERVICE TICKETS ----
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create service ticket
      security: [{ bearerAuth: [] }]
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/ServiceTicket"
      responses:
        "201": { description: Ticket created }
        "400": { description: Invalid data }
        "401": { description: Unauthorized }
    get:
      tags: [Service Tickets]
      summary: Get all tickets
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: List of tickets }
        "401": { description: Unauthorized }

# ========================
# DEFINITIONS
# ========================
definitions:
  Customer:
    type: object
    required: [name, email, phone, car]
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
        example: Alice Johnson
      email:
        type: string
        example: alice@example.com
      phone:
        type: string
        example: 555-333-4444
      car:
        type: string
        example: Honda Civic

  Mechanic:
    type: object
    required: [name, email, password, specialty]
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
        example: Mike Wrench
      email:
        type: string
        example: mike.wrench@example.com
      password:
        type: string
        example: mike123
      specialty:
        type: string
        example: Brakes

  Part:
    type: object
    required: [name, price]
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
        example: Brake Pads
      price:
        type: number
        format: float
        example: 50.0

  ServiceTicket:
    type: object
    required: [description, customer_id, mechanic_id]
    properties:
      id:
        type: integer
        readOnly: true
      description:
        type: string
        example: Brake replacement
      customer_id:
        type: integer
        example: 1
      mechanic_id:
        type: integer
        example: 2

  Login:
    type: object
    required: [email, password]
    properties:
      email:
        type: string
        example: mike.wrench@example.com
      password:
        type: string
        example: mike123
