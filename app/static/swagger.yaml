swagger: "2.0"
info:
  title: "Mechanic Shop API"
  description: "API for managing customers, mechanics, parts, and service tickets."
  version: "1.0.0"

host: "mechanics-api.onrender.com"

schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

# ========================
# SECURITY
# ========================
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Enter: Bearer <token>"

# ========================
# TAGS (folders in UI)
# ========================
tags:
  - name: Customers
    description: "Customer management"
  - name: Mechanics
    description: "Mechanic registration, login, and management"
  - name: Parts
    description: "Parts (Inventory) management"
  - name: Service Tickets
    description: "Service ticket creation and tracking"

# ========================
# PATHS
# ========================
paths:
  # ---- CUSTOMERS ----
  /customers:
    post:
      tags: [Customers]
      summary: Create a new customer
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Customer"
            example:
              name: "Alice Johnson"
              email: "alice@example.com"
              phone: "555-333-4444"
              car: "Honda Civic"
      responses:
        "201":
          description: Customer created
        "400":
          description: Bad Request (missing fields)
        "409":
          description: Conflict (email exists)

    get:
      tags: [Customers]
      summary: Get all customers
      responses:
        "200":
          description: List of customers

  /customers/{id}:
    put:
      tags: [Customers]
      summary: Update a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Customer"
            example:
              name: "Alice Updated"
              email: "alice.new@example.com"
      responses:
        "200":
          description: Customer updated
        "404":
          description: Customer not found
    delete:
      tags: [Customers]
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Customer deleted
        "404":
          description: Customer not found

  # ---- MECHANICS ----
  /mechanics/ping:
    get:
      tags: [Mechanics]
      summary: Health check
      responses:
        "200":
          description: Pong

  /mechanics:
    post:
      tags: [Mechanics]
      summary: Create a mechanic
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Mechanic"
            example:
              name: "Mike Wrench"
              email: "mike.wrench@example.com"
              password: "mike123"
              specialty: "Brakes"
      responses:
        "201":
          description: Mechanic created
        "400":
          description: Invalid input
        "409":
          description: Email exists
    get:
      tags: [Mechanics]
      summary: Get all mechanics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of mechanics
        "401":
          description: Unauthorized

  /mechanics/login:
    post:
      tags: [Mechanics]
      summary: Login mechanic
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Login"
            example:
              email: "mike.wrench@example.com"
              password: "mike123"
      responses:
        "200":
          description: Token returned
        "401":
          description: Invalid credentials

  /mechanics/{id}:
    put:
      tags: [Mechanics]
      summary: Update mechanic (self)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Mechanic updated
        "403":
          description: Forbidden
    delete:
      tags: [Mechanics]
      summary: Delete mechanic (self)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Mechanic deleted
        "403":
          description: Forbidden

  /mechanics/my-tickets:
    get:
      tags: [Mechanics]
      summary: View tickets assigned to mechanic
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of tickets
        "401":
          description: Unauthorized

  /mechanics/top:
    get:
      tags: [Mechanics]
      summary: Mechanic with most tickets
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Top mechanic
        "404":
          description: No mechanics found

  /mechanics/ticket-count:
    get:
      tags: [Mechanics]
      summary: Mechanics sorted by ticket count
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List with ticket counts

  # ---- PARTS ----
  /inventory:
    post:
      tags: [Parts]
      summary: Create part
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Inventory"
            example:
              name: "Brake Pads"
              price: 50.0
      responses:
        "201":
          description: Part created
        "400":
          description: Bad input
    get:
      tags: [Parts]
      summary: Get all parts
      responses:
        "200":
          description: List of parts

  /inventory/{id}:
    get:
      tags: [Parts]
      summary: Get part by ID
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Part found
        "404":
          description: Not found

  # ---- SERVICE TICKETS ----
  /service_tickets:
    post:
      tags: [Service Tickets]
      summary: Create service ticket
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/ServiceTicket"
            example:
              description: "Brake replacement"
              customer_id: 1
              mechanic_id: 2
      responses:
        "201":
          description: Ticket created
        "400":
          description: Invalid data
        "401":
          description: Unauthorized
    get:
      tags: [Service Tickets]
      summary: Get all tickets
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of tickets
        "401":
          description: Unauthorized

definitions:
  Customer:
    type: object
    required:
      - name
      - email
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      car:
        type: string

  Mechanic:
    type: object
    required:
      - name
      - email
      - password
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      email:
        type: string
      password:
        type: string
        writeOnly: true
      specialty:
        type: string

  Inventory:
    type: object
    required:
      - name
      - price
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      price:
        type: number
        format: float

  ServiceTicket:
    type: object
    required:
      - description
      - customer_id
    properties:
      id:
        type: integer
        readOnly: true
      description:
        type: string
      date:
        type: string
        format: date-time
        readOnly: true
      status:
        type: string
      customer_id:
        type: integer
      mechanics:
        type: array
        items:
          $ref: "#/definitions/Mechanic"
        readOnly: true
      parts:
        type: array
        items:
          $ref: "#/definitions/Inventory"
        readOnly: true

  Login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
